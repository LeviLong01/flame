<?xml version="1.0" encoding="UTF-8"?>
<ProxyEndpoint name="default">
    <Description>Default Proxy to create flows on an API</Description>
    <FaultRules/>
    <Flows>
        <Flow name="Index">
            <Description>This flow is to render the index page</Description>
            <Request>
                <Step>
                    <Name>HPX_ReadSessionCookie_JS</Name>
                </Step>
                <Step>
                    <Condition>sessionIdForCookie != null</Condition>
                    <Name>HPX_UserJSON.GetFromCache</Name>
                </Step>
                <Step>
                    <Condition>userJSON!=null</Condition>
                    <Name>HPX_extractUserIdFromUserJSON</Name>
                </Step>
                <Step>
                    <Condition>(request.header.msisdn != null) and userid=null</Condition>
                    <Name>HPX_AssignIdentifyUserRequest</Name>
                </Step>
                <Step>
                    <Condition>(request.header.msisdn != null) and userid=null</Condition>
                    <Name>HPX_ServiceCallout.IdentifyUser</Name>
                </Step>
                <Step>
                    <Condition>(request.header.msisdn != null and identifyUserResponse.status.code == 200)</Condition>
                    <Name>HPX_ExtractIdentifyUserResponse</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_CheckAlreadyConsented.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition> (previousConsentResponse.status.code = "200") and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ExtractCheckAlreadyConsentedResponse</Name>
                </Step>
                <Step>
                    <Condition>((previousConsentResponse.status.code = "200") and (consentStatus = "active")) and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ValidateScopeAgainstPreviousConsentedScope_JS</Name>
                </Step>
                <Step>
                    <Name>HPX_GetUserProfileFromUserManagement</Name>
                </Step>
                <Step>
                    <Condition>((previousConsentResponse.status.code = "200") and (consentStatus = "active")) and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ExtractUserAttributeAndAssignToReq</Name>
                </Step>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_ModifyNodeTargetRequestForIdentifiedUser</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/index&quot;) and (request.verb = &quot;GET&quot;)</Condition>
        </Flow>
        <Flow name="SMS Login flow">
            <Description>This flow is for SMS log in</Description>
            <Request>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_GetMsisdnFromRequest</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_CheckMSISDNExists.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>userManagement.response.status.code = "200"</Condition>
                    <Name>HPX_ExtractUserIdFromResponse</Name>
                </Step>
                <Step>
                    <Condition>userManagement.response.status.code != "200"</Condition>
                    <Name>HPX_AssignInvalidMSISDNError</Name>
                </Step>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_ModifyNodeTargetRequestForIdentifiedUser</Name>
                </Step>
                <Step>
                    <Condition>(userManagement.response.status.code = "200")and (userid != null)</Condition>
                    <Name>HPX_AssignSendSMSAPIRequest</Name>
                </Step>
                <Step>
                    <Condition>(userManagement.response.status.code = "200")and (userid != null)</Condition>
                    <Name>HPX_SendSMS.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/msisdnsubmit&quot;) and (request.verb = &quot;POST&quot;)</Condition>
        </Flow>
        <Flow name="OnNet flow">
            <Description>This flow is for SMS log in</Description>
            <Request>
                <Step>
                    <Name>HPX_GetMsisdnFromHeader</Name>
                </Step>
                <Step>
                    <Condition>(msisdn != null)</Condition>
                    <Name>HPX_CheckMSISDNExists.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>userManagement.response.status.code = "200"</Condition>
                    <Name>HPX_ExtractUserIdFromResponse</Name>
                </Step>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response>
                <!-- Authorization Successful Response -->
                <Step>
                    <FaultRules/>
                    <Name>HPX_redirectToConsent</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/onnet&quot;) and (request.verb = &quot;GET&quot;)</Condition>
        </Flow>
        <Flow name="Password login Flow">
            <Description>This flow is for Allow Consent</Description>
            <Request>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_ExtractUserCredentails</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_AssignValidateUserRequest</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_ServiceCallout.ValidateUser</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null and validateUserResponse.status.code == "200")</Condition>
                    <Name>HPX_ExtractValidateUserResponse</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_CheckAlreadyConsented.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition> (previousConsentResponse.status.code = "200") and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ExtractCheckAlreadyConsentedResponse</Name>
                </Step>
                <Step>
                    <Condition>((previousConsentResponse.status.code = "200") and (consentStatus = "active")) and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ValidateScopeAgainstPreviousConsentedScope_JS</Name>
                </Step>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_ModifyNodeTargetRequestForIdentifiedUser</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(sessionIdForCookie = null and userid != null)</Condition>
                    <Name>HPX_GenerateCookieUUID</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null)</Condition>
                    <Name>HPX_SetUserVariableJson</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null)</Condition>
                    <Name>HPX_SetUserVariableInSession</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) </Condition>
                    <Name>HPX_SendCookieInResposne</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/login&quot;) and (request.verb = &quot;POST&quot;)</Condition>
        </Flow>
        <Flow name="Redirect-Flow">
            <Description>This flow is for redirect</Description>
            <Request>
                <Step>
                    <Condition> (request.queryparam.error != null)</Condition>
                    <FaultRules/>
                    <Name>HPX_SetFlowErrorFromQueryParam</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null) and (request.queryparam.error = null)</Condition>
                    <FaultRules/>
                    <Name>HPX_GenerateAuthCode.AssignRequest</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null) and (request.queryparam.error = null)</Condition>
                    <FaultRules/>
                    <Name>HPX_GenerateAuthCode.Callout</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null) and (request.queryparam.error = null)</Condition>
                    <FaultRules/>
                    <Name>HPX_GenerateAuthCode.ExtractResponse</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null) and authcode.response.status.code = 302</Condition>
                    <Name>HPX_RetrieveCodeFromURL_JS</Name>
                </Step>
                <Step>
                    <Condition>(code = null or code = "" ) and (flowError = null)</Condition>
                    <FaultRules/>
                    <Name>HPX_SetFlowErrorForInvalidCode</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_OauthAOC.redirectToRedirectFlow</Name>
                </Step>
                <Step>
                    <Condition>(flowError != null)</Condition>
                    <Name>HPX_RedirectErrorToCallbackURI</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/redirect/{sessionid}&quot;) and ((request.verb = &quot;GET&quot;) or (request.verb = &quot;POST&quot;))</Condition>
        </Flow>
        <Flow name="create">
            <Description>This flow is for creating a user</Description>
            <Request>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_ExtractUserDetails</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_AssignRegistrationFlag</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_CheckUserExists.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>userManagement.response.status.code != "404"</Condition>
                    <Name>HPX_AssignUserAlreadyExistsError</Name>
                </Step>
                <Step>
                    <Condition>(userManagement.response.status.code = "404")</Condition>
                    <Name>HPX_AssignSendSMSAPIRequest</Name>
                </Step>
                <Step>
                    <Condition>(userManagement.response.status.code = "404")</Condition>
                    <Name>HPX_SendSMS.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/create&quot;) and (request.verb = &quot;POST&quot;)</Condition>
        </Flow>
        <Flow name="saveUser">
            <Description>This flow is for creating and saving user details without pin validation.Overrides 'pin submit Flow for registeration process' flow</Description>
            <Request>
                <Step>
                    <Name>HPX_AssignRequestToCreateUser</Name>
                </Step>
                <Step>
                    <Name>HPX_CreateUser.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>createUser.response.status.code = "201"</Condition>
                    <Name>HPX_AssignRequestToSetPassword</Name>
                </Step>
                <Step>
                    <Condition>createUser.response.status.code = "201"</Condition>
                    <Name>HPX_SetPassword.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>setPassword.response.status.code != "201"</Condition>
                    <Name>HPX_AssignUserRegistrationFailedError</Name>
                </Step>
                <Step>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(sessionIdForCookie = null and userid != null) and (setPassword.response.status.code = "201")</Condition>
                    <Name>HPX_GenerateCookieUUID</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (setPassword.response.status.code = "201")</Condition>
                    <Name>HPX_SetUserVariableJson</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (setPassword.response.status.code = "201")</Condition>
                    <Name>HPX_SetUserVariableInSession</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (setPassword.response.status.code = "201")</Condition>
                    <Name>HPX_SendCookieInResposne</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/saveUser&quot;) and (request.verb = &quot;GET&quot;) and (registrationFlag="true")</Condition>
        </Flow>
        <Flow name="recoverPassword">
            <Description>This flow is for password resetting password without a pin validation.Overrides 'pin submit for password recovery'flow</Description>
            <Request>
                <Step>
                    <Name>HPX_AssignRequestToResetPassword</Name>
                </Step>
                <Step>
                    <Name>HPX_ResetPassword.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>resetPassword.response.status.code != "201"</Condition>
                    <Name>HPX_AssignPasswordResttingFailedError</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_CheckAlreadyConsented.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>(previousConsentResponse.status.code = "200")</Condition>
                    <Name>HPX_ExtractCheckAlreadyConsentedResponse</Name>
                </Step>
                <Step>
                    <Condition>(previousConsentResponse.status.code = "200") and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ValidateScopeAgainstPreviousConsentedScope_JS</Name>
                </Step>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_ModifyNodeTargetRequestForIdentifiedUser</Name>
                </Step>
                <Step>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(sessionIdForCookie = null and userid != null) and (resetPassword.response.status.code = "201")</Condition>
                    <Name>HPX_GenerateCookieUUID</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (resetPassword.response.status.code = "201")</Condition>
                    <Name>HPX_SetUserVariableJson</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (resetPassword.response.status.code = "201")</Condition>
                    <Name>HPX_SetUserVariableInSession</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (resetPassword.response.status.code = "201")</Condition>
                    <Name>HPX_SendCookieInResposne</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/saveUser&quot;) and (request.verb = &quot;GET&quot;) and (resetFalg="true")</Condition>
        </Flow>
        <Flow name="reset">
            <Description>This flow is for creating a user</Description>
            <Request>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_ExtractResetPasswordUserDetails</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_AssignResetFlag</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_CheckUserExists.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>userManagement.response.status.code = "200"</Condition>
                    <Name>HPX_ExtractUserIdFromResponse</Name>
                </Step>
                <Step>
                    <Condition>userManagement.response.status.code != "200"</Condition>
                    <Name>HPX_AssignUserDoesntExistError</Name>
                </Step>
                <Step>
                    <Condition>(userManagement.response.status.code = "200")</Condition>
                    <Name>HPX_AssignSendSMSAPIRequest</Name>
                </Step>
                <Step>
                    <Condition>(userManagement.response.status.code = "200")</Condition>
                    <Name>HPX_SendSMS.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Condition>(flowError = null)</Condition>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/reset&quot;) and (request.verb = &quot;POST&quot;)</Condition>
        </Flow>
        <Flow name="pin submit Flow for registeration process">
            <Description>This flow is for pin Validation</Description>
            <Request>
                <Step>
                    <Condition>(no_of_pin_tries = null) or (no_of_pin_tries = "") or (no_of_pin_tries &lt; 2)</Condition>
                    <Name>HPX_ValidatePin.ServiceCallout</Name>
                </Step>
                <Step>
                    <Name>HPX_CheckPinEntryTries_JS</Name>
                </Step>
                <Step>
                    <Condition>isTokenValidationThrough= "true"</Condition>
                    <Name>HPX_AssignRequestToCreateUser</Name>
                </Step>
                <Step>
                    <Condition>isTokenValidationThrough= "true"</Condition>
                    <Name>HPX_CreateUser.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>createUser.response.status.code = "201"</Condition>
                    <Name>HPX_AssignRequestToSetPassword</Name>
                </Step>
                <Step>
                    <Condition>createUser.response.status.code = "201"</Condition>
                    <Name>HPX_SetPassword.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>isTokenValidationThrough= "true" and setPassword.response.status.code != "201"</Condition>
                    <Name>HPX_AssignUserRegistrationFailedError</Name>
                </Step>
                <Step>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(sessionIdForCookie = null and userid != null) and (setPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_GenerateCookieUUID</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (setPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_SetUserVariableJson</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (setPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_SetUserVariableInSession</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (setPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_SendCookieInResposne</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/pinSubmit&quot;) and (request.verb = &quot;POST&quot;) and (registrationFlag="true")</Condition>
        </Flow>
        <Flow name="pin submit for password recovery flow">
            <Description>This flow is for pin Validation</Description>
            <Request>
                <Step>
                    <Condition>(no_of_pin_tries = null) or (no_of_pin_tries = "") or (no_of_pin_tries &lt; 2)</Condition>
                    <Name>HPX_ValidatePin.ServiceCallout</Name>
                </Step>
                <Step>
                    <Name>HPX_CheckPinEntryTries_JS</Name>
                </Step>
                <Step>
                    <Condition> (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_AssignRequestToResetPassword</Name>
                </Step>
                <Step>
                    <Condition> (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_ResetPassword.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition>resetPassword.response.status.code != "201" and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_AssignPasswordResttingFailedError</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (isUserProfileFlow != "true") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_CheckAlreadyConsented.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition> (previousConsentResponse.status.code = "200") and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ExtractCheckAlreadyConsentedResponse</Name>
                </Step>
                <Step>
                    <Condition> (previousConsentResponse.status.code = "200") and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ValidateScopeAgainstPreviousConsentedScope_JS</Name>
                </Step>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_ModifyNodeTargetRequestForIdentifiedUser</Name>
                </Step>
                <Step>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(sessionIdForCookie = null and userid != null) and (resetPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_GenerateCookieUUID</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (resetPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_SetUserVariableJson</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (resetPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_SetUserVariableInSession</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (resetPassword.response.status.code = "201") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_SendCookieInResposne</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/pinSubmit&quot;) and (request.verb = &quot;POST&quot;) and (resetFalg="true") </Condition>
        </Flow>
        <Flow name="pin submit for sms login flow">
            <Description>This flow is for pin Validation</Description>
            <Request>
                <Step>
                    <Condition>(no_of_pin_tries = null) or (no_of_pin_tries = "") or (no_of_pin_tries &lt; 2)</Condition>
                    <Name>HPX_ValidatePin.ServiceCallout</Name>
                </Step>
                <Step>
                    <Name>HPX_CheckPinEntryTries_JS</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (isUserProfileFlow != "true") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_CheckAlreadyConsented.ServiceCallout</Name>
                </Step>
                <Step>
                    <Condition> (previousConsentResponse.status.code = "200") and (isUserProfileFlow != "true") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_ExtractCheckAlreadyConsentedResponse</Name>
                </Step>
                <Step>
                    <Condition> (previousConsentResponse.status.code = "200") and (isUserProfileFlow != "true") and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_ValidateScopeAgainstPreviousConsentedScope_JS</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (isUserProfileFlow != "true")</Condition>
                    <Name>HPX_ModifyNodeTargetRequestForIdentifiedUser</Name>
                </Step>
                <Step>
                    <Name>HPX_SetVariablesInSession</Name>
                </Step>
                <Step>
                    <Name>HPX_Session.SetInCache</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(sessionIdForCookie = null and userid != null) and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_GenerateCookieUUID</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (isTokenValidationThrough= "true") </Condition>
                    <Name>HPX_SetUserVariableJson</Name>
                </Step>
                <Step>
                    <Condition>(sessionIdForCookie != null and userid != null) and (isTokenValidationThrough= "true")</Condition>
                    <Name>HPX_SetUserVariableInSession</Name>
                </Step>
                <Step>
                    <Condition>(userid != null) and (isTokenValidationThrough= "true") </Condition>
                    <Name>HPX_SendCookieInResposne</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/pinSubmit&quot;) and (request.verb = &quot;POST&quot;) </Condition>
        </Flow>
        <Flow name="Update Profile">
            <Description>Flow for updating profile</Description>
            <Request>
                <Step>
                    <Name>HPX_AssignRequestToUpdateUserProfile</Name>
                </Step>
                <Step>
                    <Name>HPX_UpdateUserProfile.ServiceCallout</Name>
                </Step>
            </Request>
            <Condition>(proxy.pathsuffix MatchesPath "/profile/update") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="My Apps">
            <Description>
			Flow for displaying the user's consented applications
		</Description>
            <Request>
                <Step>
                    <Name>HPX_GetUserApps.ServiceCallout</Name>
                </Step>
                <Step>
                    <Name>HPX_AssignUserAppParams</Name>
                </Step>
            </Request>
            <Condition>(proxy.pathsuffix MatchesPath "/myapps") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Revoke Consent">
            <Description>Flow for revoking user consent</Description>
            <Request>
                <Step>
                    <Name>HPX_RevokeUserConsent.ServiceCallout</Name>
                </Step>
            </Request>
            <Condition>(proxy.pathsuffix MatchesPath "/apps/revoke") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Logout">
            <Description>Flow for logout</Description>
            <Request>
                <Step>
                    <Name>HPX_AssignlogoutRedircetUri</Name>
                    <Condition>request.queryparam.logoutRedircetUri="" or request.queryparam.logoutRedircetUri=null </Condition>
                </Step>
                <Step>
                    <Name>HPX_InvalidateSession</Name>
                </Step>
                <Step>
                    <Name>HPX_InvalidateAccessToken</Name>
                    <Condition>request.queryparam.accessToken !="" and request.queryparam.accessToken!=null</Condition>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>HPX_RedirectToIndex</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/logout") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="My Profile">
            <Description>TO render Profile</Description>
            <Request>
                <Step>
                    <Condition>(userid != null)</Condition>
                    <Name>HPX_GetUserProfileFromUserManagement</Name>
                </Step>
                <Step>
                    <Condition>(userProfile.response.status.code = "200") </Condition>
                    <Name>HPX_ExtractUserAttributeAndAssignToReq</Name>
                </Step>
            </Request>
            <Response></Response>
            <Condition>((proxy.pathsuffix MatchesPath "/profile") or (proxy.pathsuffix MatchesPath "/edit-profile") )and (request.verb = "GET")</Condition>
        </Flow>
    </Flows>
    <PreFlow name="PreFlow">
        <Request>
            <Step>
                <Condition>(request.verb=&quot;OPTIONS&quot;)</Condition>
                <Name>HPX_CORSPreflight</Name>
            </Step>
            <Step>
                <Condition>(proxy.pathsuffix MatchesPath &quot;/onnet&quot;) or (proxy.pathsuffix MatchesPath &quot;/index&quot;) or (proxy.pathsuffix MatchesPath "/edit-profile") or(proxy.pathsuffix MatchesPath &quot;/profile/update&quot;) or (proxy.pathsuffix MatchesPath "/profile") or (proxy.pathsuffix MatchesPath &quot;/logout&quot;) or (proxy.pathsuffix MatchesPath "/myapps") or (proxy.pathsuffix MatchesPath &quot;/recovery&quot;)or (proxy.pathsuffix MatchesPath &quot;/register&quot;) or (proxy.pathsuffix MatchesPath &quot;/reset&quot;) or (proxy.pathsuffix MatchesPath &quot;/login&quot;)  or (proxy.pathsuffix MatchesPath &quot;/create&quot;) or (proxy.pathsuffix MatchesPath &quot;/msisdnsubmit&quot;) or (proxy.pathsuffix MatchesPath &quot;/pinSubmit&quot;) or (proxy.pathsuffix MatchesPath &quot;/saveUser&quot;)</Condition>
                <Name>HPX_ExtractSessionId</Name>
            </Step>
            <Step>
                <Condition>(proxy.pathsuffix MatchesPath &quot;/index&quot;) and (sessionid = null)</Condition>
                <Name>HPX_RaiseFlagForUserSelfServiceFlow</Name>
            </Step>
            <Step>
                <Condition>(isUserProfileFlow = "true")</Condition>
                <Name>HPX_GenerateUUID</Name>
            </Step>
            <Step>
                <Condition>(isUserProfileFlow != "true") and ((proxy.pathsuffix MatchesPath &quot;/redirect/{sessionid}&quot;))</Condition>
                <Name>HPX_ExtractSessionIdFromURL</Name>
            </Step>
            <Step>
                <Condition>(isUserProfileFlow != "true") and (proxy.pathsuffix MatchesPath &quot;/redirect/{sessionid}&quot;)or (proxy.pathsuffix MatchesPath "/edit-profile") or (proxy.pathsuffix MatchesPath "/edit-profile") or (proxy.pathsuffix MatchesPath "/profile") or ((proxy.pathsuffix MatchesPath &quot;/profile/update&quot;)) or (proxy.pathsuffix MatchesPath "/myapps") or (proxy.pathsuffix MatchesPath &quot;/reset&quot;) or (proxy.pathsuffix MatchesPath &quot;/index&quot;) or (proxy.pathsuffix MatchesPath &quot;/onnet&quot;) or (proxy.pathsuffix MatchesPath &quot;/login&quot;)   or (proxy.pathsuffix MatchesPath &quot;/create&quot;) or (proxy.pathsuffix MatchesPath &quot;/msisdnsubmit&quot;) or (proxy.pathsuffix MatchesPath &quot;/pinSubmit&quot;)or (proxy.pathsuffix MatchesPath &quot;/saveUser&quot;)</Condition>
                <Name>HPX_Session.GetFromCache</Name>
            </Step>
            <Step>
                <Condition>(isUserProfileFlow != "true") and ((session.Payload = null) or (session.Payload = "")) and ((proxy.pathsuffix MatchesPath &quot;/redirect/{sessionid}&quot;) or (proxy.pathsuffix MatchesPath "/edit-profile")  or (proxy.pathsuffix MatchesPath "/profile") or (proxy.pathsuffix MatchesPath &quot;/profile/update&quot;) or (proxy.pathsuffix MatchesPath "/myapps") or (proxy.pathsuffix MatchesPath &quot;/reset&quot;) or (proxy.pathsuffix MatchesPath &quot;/index&quot;) or (proxy.pathsuffix MatchesPath &quot;/onnet&quot;) or (proxy.pathsuffix MatchesPath &quot;/login&quot;)  or (proxy.pathsuffix MatchesPath &quot;/create&quot;) or (proxy.pathsuffix MatchesPath &quot;/pinSubmit&quot;) or (proxy.pathsuffix MatchesPath &quot;/msisdnsubmit&quot;) or (proxy.pathsuffix MatchesPath &quot;/saveUser&quot;))</Condition>
                <Name>HPX_SetSessionError</Name>
            </Step>
            <Step>
                <Condition>(isUserProfileFlow != "true") and (flowError = null) and ((proxy.pathsuffix MatchesPath &quot;/redirect/{sessionid}&quot;) or (proxy.pathsuffix MatchesPath &quot;/reset&quot;) or (proxy.pathsuffix MatchesPath "/profile") or (proxy.pathsuffix MatchesPath "/edit-profile") or ((proxy.pathsuffix MatchesPath &quot;/profile/update&quot;)) or (proxy.pathsuffix MatchesPath "/myapps")  or (proxy.pathsuffix MatchesPath &quot;/index&quot;) or (proxy.pathsuffix MatchesPath &quot;/onnet&quot;) or (proxy.pathsuffix MatchesPath &quot;/login&quot;)   or (proxy.pathsuffix MatchesPath &quot;/create&quot;) or (proxy.pathsuffix MatchesPath &quot;/msisdnsubmit&quot;) or (proxy.pathsuffix MatchesPath &quot;/pinSubmit&quot;) or (proxy.pathsuffix MatchesPath &quot;/saveUser&quot;))</Condition>
                <Name>HPX_ExtractSessionVariables</Name>
            </Step>
            <Step>
                <Condition>(flowError != null) and ((open_id != "true") || (isUserProfileFlow = "true"))</Condition>
                <Name>HPX_RedirectToIndex</Name>
            </Step>
            <Step>
                <Condition>(flowError != null)</Condition>
                <Name>HPX_RedirectErrorInAuthorize</Name>
            </Step>
        </Request>
        <Response/>
    </PreFlow>
    <PostFlow name="PostFlow">
        <Response>
            <Step>
                <Condition>(request.verb!=&quot;OPTIONS&quot;)</Condition>
                <Name>HPX_CORS</Name>
            </Step>
        </Response>
    </PostFlow>
    <HTTPProxyConnection>
        <BasePath>/openid</BasePath>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="onnet">
        <Condition>(proxy.pathsuffix MatchesPath &quot;/onnet&quot;) and (request.verb = &quot;GET&quot;)</Condition>
    </RouteRule>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>
